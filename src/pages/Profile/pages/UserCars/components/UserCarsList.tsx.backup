import React, { useState } from 'react';
import { Car } from '../../../../../api/types/car.types';
import { useNavigate } from 'react-router-dom';
import { usePrice } from '../../../../../context/usePrice';
import { useCurrency } from '../../../../../context/CurrencyContext';
import { Edit2, Trash2, Eye, Calendar, MapPin, Gauge, Fuel, Settings, CheckCircle, Clock, AlertTriangle, Star, XCircle, Crown } from 'lucide-react';
import UserVipModal from './UserVipModal';
import vipService from '../../../../../api/services/vipService';
import { useToast } from '../../../../../context/ToastContext';

interface UserCarsListProps {
  cars: Car[];
  onDelete: (carId: number) => void;
  onVipUpdate: () => void;
}

const UserCarsList: React.FC<UserCarsListProps> = ({ cars, onDelete, onVipUpdate }) => {
  // Debug: ვლოგავთ მანქანებს VIP სტატუსით
  console.log('UserCarsList received cars with VIP status:', cars.filter(car => car.vip_status && car.vip_status !== 'none').map(car => ({ id: car.id, vip_status: car.vip_status })));
  const navigate = useNavigate();
  const { currency } = useCurrency();
  const { formatPrice } = usePrice();
  const [selectedCar, setSelectedCar] = useState<Car | null>(null);
  const [isVipModalOpen, setIsVipModalOpen] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [loading, setLoading] = useState<number | null>(null);
  const { showToast } = useToast();

  // ფუნქცია სტატუსის მნიშვნელობის ქართულად გადასათარგმნად
  const getStatusText = (status: string): string => {
    switch (status) {
      case 'available':
        return 'ხელმისაწვდომია';
      case 'pending':
        return 'დასტურის მოლოდინში';
      case 'sold':
        return 'გაყიდულია';
      case 'inactive':
        return 'არააქტიური';
      case 'deleted':
        return 'წაშლილია';
      default:
        return 'უცნობია';
    }
  };

  // VIP სტატუსის გათიშვის ფუნქცია
  const handleDisableVip = async (carId: number) => {
    try {
      setLoading(carId);
      await vipService.disableVipStatus(carId);
      showToast('VIP სტატუსი გაუქმებულია', 'success');
      onVipUpdate(); // განაახლეთ მშობელი კომპონენტი
    } catch (error) {
      console.error('Error disabling VIP status:', error);
      showToast('შეცდომა VIP სტატუსის გაუქმებისას', 'error');
    } finally {
      setLoading(null);
    }
  };

  // ფუნქცია სტატუსის შესაბამისი ფერების და იკონის დასაბრუნებლად
  const getStatusStyle = (status: string) => {
    switch (status) {
      case 'available':
        return {
          bgColor: 'bg-green-50',
          textColor: 'text-green-700',
          icon: <CheckCircle size={16} className="mr-2 text-green-600" />
        };
      case 'pending':
        return {
          bgColor: 'bg-yellow-50',
          textColor: 'text-yellow-700',
          icon: <Clock size={16} className="mr-2 text-yellow-600" />
        };
      case 'sold':
        return {
          bgColor: 'bg-blue-50',
          textColor: 'text-blue-700',
          icon: <CheckCircle size={16} className="mr-2 text-blue-600" />
        };
      case 'inactive':
        return {
          bgColor: 'bg-gray-50',
          textColor: 'text-gray-700',
          icon: <AlertTriangle size={16} className="mr-2 text-gray-600" />
        };
      case 'deleted':
        return {
          bgColor: 'bg-red-50',
          textColor: 'text-red-700',
          icon: <AlertTriangle size={16} className="mr-2 text-red-600" />
        };
      default:
        return {
          bgColor: 'bg-gray-50',
          textColor: 'text-gray-700',
          icon: <AlertTriangle size={16} className="mr-2 text-gray-600" />
        };
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm overflow-hidden">
      {/* Desktop view - Table */}
      {/* VIP სტატუსის მქონე მანქანების სია გამორთულია */}
      
      <div className="hidden md:block bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100">
        <div className="overflow-x-auto">
          <table className="w-full min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  მანქანა
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ფასი
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ძირითადი მონაცემები
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  სტატუსი
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  მოქმედებები
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {cars.map((car) => {
                const statusStyle = getStatusStyle(car.status);
                
                return (
                  <tr 
                    key={car.id} 
                    className="group hover:bg-blue-50/30 transition-colors duration-150"
                  >
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-4">
                        <div className="flex-shrink-0 h-14 w-20 bg-gray-100 rounded-md overflow-hidden relative">
                          <img 
                            src={car.images[0]?.medium_url || '/images/car-placeholder.png'} 
                            alt={`${car.brand} ${car.model}`} 
                            className="h-full w-full object-cover"
                          />
                        </div>
                        <div className="flex flex-col">
                          <div className="flex items-center">
                            <div className="text-sm font-medium text-gray-900">
                              {car.title || `${car.brand} ${car.model}`}
                            </div>
                            {/* VIP სტატუსის ბეჯი გამორთულია */}
                          </div>
                          <div className="flex items-center text-xs text-gray-500 mt-1">
                            <Calendar size={14} className="mr-1" /> {car.year}
                          </div>
                          <div className="flex items-center text-xs text-gray-500 mt-1">
                            <MapPin size={14} className="mr-1" /> {car.location.city}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-primary">
                        {formatPrice(car.price)}
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex flex-col space-y-1">
                        <div className="flex items-center text-xs text-gray-500">
                          <Gauge size={14} className="mr-2" /> 
                          <span>{car.specifications?.mileage ? car.specifications.mileage.toLocaleString() : '0'} კმ</span>
                        </div>
                        <div className="flex items-center text-xs text-gray-500">
                          <Fuel size={14} className="mr-2" /> 
                          <span>{car.specifications?.fuel_type}</span>
                        </div>
                        <div className="flex items-center text-xs text-gray-500">
                          <Settings size={14} className="mr-2" /> 
                          <span>{car.specifications?.transmission}</span>
                        </div>
                        {/* VIP სტატუსის კონტროლი გამორთულია */}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${statusStyle.bgColor} ${statusStyle.textColor}`}>
                        {statusStyle.icon}
                        {getStatusText(car.status)}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center gap-2 justify-end">
                        {car.vip_status && car.vip_status !== 'none' ? (
                          <div className="flex gap-1">
                            <button
                              onClick={() => {
                                setSelectedCar(car);
                                setIsVipModalOpen(true);
                              }}
                              className={`p-1.5 rounded-lg transition-colors flex items-center gap-1 ${car.vip_status === 'vip' ? 'bg-blue-100 hover:bg-blue-200 text-blue-700' : car.vip_status === 'vip_plus' ? 'bg-purple-100 hover:bg-purple-200 text-purple-700' : 'bg-yellow-100 hover:bg-yellow-200 text-yellow-700'}`}
                              title={`აქტიური VIP სტატუსი: ${car.vip_status === 'vip' ? 'VIP' : car.vip_status === 'vip_plus' ? 'VIP+' : 'SUPER VIP'}`}
                            >
                              <Star 
                                size={16} 
                                fill="currentColor" 
                              />
                              <span className="text-xs font-medium">{car.vip_status === 'vip' ? 'VIP' : car.vip_status === 'vip_plus' ? 'VIP+' : 'SUPER'}</span>
                            </button>
                            <button
                              onClick={() => handleDisableVip(car.id)}
                              disabled={loading === car.id}
                              className="p-1.5 hover:bg-red-100 rounded-lg transition-colors"
                              title="VIP სტატუსის გათიშვა"
                            >
                              <XCircle 
                                size={16} 
                                className={`${loading === car.id ? 'text-gray-400' : 'text-red-500'}`} 
                              />
                            </button>
                          </div>
                        ) : (
                          <button
                            onClick={() => {
                              setSelectedCar(car);
                              setIsVipModalOpen(true);
                            }}
                            className="p-1.5 hover:bg-yellow-100 rounded-lg transition-colors group-hover:bg-yellow-100"
                            title="VIP სტატუსის დამატება"
                          >
                            <Star 
                              size={16} 
                              className="text-gray-600 group-hover:text-yellow-600" 
                              fill="none" 
                            />
                          </button>
                        )}
                        <button
                          onClick={() => navigate(`/cars/${car.id}`)}
                          className="p-1.5 hover:bg-blue-100 rounded-lg transition-colors group-hover:bg-blue-100"
                          title="ნახვა"
                        >
                          <Eye size={16} className="text-gray-600 group-hover:text-blue-600" />
                        </button>
                        <button
                          onClick={() => navigate(`/profile/cars/edit/${car.id}`)}
                          className="p-1.5 hover:bg-blue-100 rounded-lg transition-colors group-hover:bg-blue-100"
                          title="რედაქტირება"
                        >
                          <Edit2 size={16} className="text-gray-600 group-hover:text-blue-600" />
                        </button>
                        <button
                          onClick={() => onDelete(car.id)}
                          className="p-1.5 hover:bg-red-100 rounded-lg transition-colors group-hover:bg-red-100"
                          title="წაშლა"
                        >
                          <Trash2 size={16} className="text-red-600" />
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>

      {/* Mobile view - Card layout */}
      <div className="md:hidden space-y-4">
        {cars.map((car) => {
          const statusStyle = getStatusStyle(car.status);
          
          return (
            <div 
              key={car.id} 
              className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden"
            >
              <div className="flex items-center p-4 border-b border-gray-100">
                  <div className="flex-shrink-0 h-20 w-28 bg-gray-100 rounded-md overflow-hidden mr-4 relative">
                    <img 
                      src={car.images[0]?.medium_url || '/images/car-placeholder.png'} 
                      alt={`${car.brand} ${car.model}`} 
                    </div>
                    <div className="flex flex-col">
                      <div className="flex items-center">
                        <div className="text-sm font-medium text-gray-900">
                          {car.title || `${car.brand} ${car.model}`}
                        </div>
                      </div>
                      <div className="flex items-center text-xs text-gray-500 mt-1">
                        <Calendar size={14} className="mr-1" /> {car.year}
                      </div>
                      <div className="flex items-center text-xs text-gray-500 mt-1">
                        <MapPin size={14} className="mr-1" /> {car.location.city}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-primary">
                    {formatPrice(car.price)}
                  </div>
                </td>
                <td className="px-6 py-4">
                  <div className="flex flex-col space-y-1">
                    <div className="flex items-center text-xs text-gray-500">
                      <Gauge size={14} className="mr-2" /> 
                      <span>{car.specifications?.mileage ? car.specifications.mileage.toLocaleString() : '0'} კმ</span>
                    </div>
                    <div className="flex items-center text-xs text-gray-500">
                      <Fuel size={14} className="mr-2" /> 
                      <span>{car.specifications?.fuel_type}</span>
                    </div>
                    <div className="flex items-center text-xs text-gray-500">
                      <Settings size={14} className="mr-2" /> 
                      <span>{car.specifications?.transmission}</span>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${statusStyle.bgColor} ${statusStyle.textColor}`}>
                    {statusStyle.icon}
                    {getStatusText(car.status)}
                  </div>
                </div>
              </div>
              
              <div className="p-4 border-b border-gray-100 bg-gray-50">
                {car.vip_status && car.vip_status !== 'none' && (
                  <div className={`mb-3 p-2 flex items-center justify-center gap-2 rounded-lg ${car.vip_status === 'vip' ? 'bg-blue-100 text-blue-700' : car.vip_status === 'vip_plus' ? 'bg-purple-100 text-purple-700' : 'bg-yellow-100 text-yellow-700'}`}>
                    <Star size={18} fill="currentColor" />
                    <span className="font-semibold text-sm">{car.vip_status === 'vip' ? 'VIP სტატუსი აქტიურია' : car.vip_status === 'vip_plus' ? 'VIP+ სტატუსი აქტიურია' : 'SUPER VIP სტატუსი აქტიურია'}</span>
                  </div>
                )}
                <div className="grid grid-cols-3 gap-2">
                  <div className="flex flex-col items-center p-2 bg-white rounded-lg">
                    <div className="flex items-center text-xs text-gray-500 mb-1">
                      <Calendar size={16} />
                    </div>
                    <div className="text-sm font-medium">{car.year}</div>
                  </div>
                  <div className="flex flex-col items-center p-2 bg-white rounded-lg">
                    <div className="flex items-center text-xs text-gray-500 mb-1">
                      <Gauge size={16} />
                    </div>
                    <div className="text-sm font-medium">{car.specifications.mileage ? car.specifications.mileage.toLocaleString() : '0'} კმ</div>
                  </div>
                  <div className="flex flex-col items-center p-2 bg-white rounded-lg">
                    <div className="flex items-center text-xs text-gray-500 mb-1">
                      <Fuel size={16} /> 
                    </div>
                    <div className="text-sm font-medium">{car.specifications.fuel_type}</div>
                  </div>
                </div>
              </div>
              
              <div className="p-4 flex justify-between items-center">
                <div className="flex items-center text-sm text-gray-500">
                  <MapPin size={16} className="mr-1" /> {car.location.city}
                </div>
                <div className="flex gap-2 mt-3 justify-end p-3 pt-0">
                {car.vip_status && car.vip_status !== 'none' ? (
                  <div className="flex gap-1">
                    <button
                      onClick={() => {
                        setSelectedCar(car);
                        setIsVipModalOpen(true);
                      }}
                      className={`p-2 rounded-lg transition-colors flex items-center gap-1 ${car.vip_status === 'vip' ? 'bg-blue-100 hover:bg-blue-200 text-blue-700' : car.vip_status === 'vip_plus' ? 'bg-purple-100 hover:bg-purple-200 text-purple-700' : 'bg-yellow-100 hover:bg-yellow-200 text-yellow-700'}`}
                      title={`აქტიური VIP სტატუსი: ${car.vip_status === 'vip' ? 'VIP' : car.vip_status === 'vip_plus' ? 'VIP+' : 'SUPER VIP'}`}
                    >
                      <Star 
                        size={16} 
                        fill="currentColor" 
                      />
                      <span className="text-xs font-medium">{car.vip_status === 'vip' ? 'VIP' : car.vip_status === 'vip_plus' ? 'VIP+' : 'SUPER'}</span>
                    </button>
                    <button
                      onClick={() => handleDisableVip(car.id)}
                      disabled={loading === car.id}
                      className="p-2 hover:bg-red-100 rounded-lg transition-colors"
                      title="VIP სტატუსის გათიშვა"
                    >
                      <XCircle 
                        size={16} 
                        className={`${loading === car.id ? 'text-gray-400' : 'text-red-500'}`} 
                      />
                    </button>
                  </div>
                ) : (
                  <button
                    onClick={() => {
                      setSelectedCar(car);
                      setIsVipModalOpen(true);
                    }}
                    className="p-2 hover:bg-yellow-100 rounded-lg transition-colors relative"
                    title="VIP სტატუსის დამატება"
                  >
                    <Star 
                      size={16} 
                      className="text-gray-600 hover:text-yellow-600" 
                      fill="none" 
                    />
                  </button>
                )}
                  <button
                    onClick={() => navigate(`/cars/${car.id}`)}
                    className="p-2 hover:bg-blue-100 rounded-lg transition-colors"
                    title="ნახვა"
                  >
                    <Eye size={16} className="text-gray-600 hover:text-blue-600" />
                  </button>
                  <button
                    onClick={() => navigate(`/profile/cars/edit/${car.id}`)}
                    className="p-2 hover:bg-blue-100 rounded-lg transition-colors"
                    title="რედაქტირება"
                  >
                    <Edit2 size={16} className="text-gray-600 hover:text-blue-600" />
                  </button>
                  <button
                    onClick={() => onDelete(car.id)}
                    className="p-2 hover:bg-red-100 rounded-lg transition-colors"
                    title="წაშლა"
                  >
                    <Trash2 size={16} className="text-red-600" />
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* VIP Status Modal */}
      {selectedCar && (
        <UserVipModal
          car={selectedCar}
          isOpen={isVipModalOpen}
          onClose={() => {
            setIsVipModalOpen(false);
            setSelectedCar(null);
          }}
          onStatusUpdate={() => {
            // ვიძახებთ onVipUpdate კოლბეკს მშობელი კომპონენტიდან, რათა განახლდეს მანქანების სია
            onVipUpdate();
            // ლოკალური რეფრეშის ტრიგერი
            setRefreshTrigger(prev => prev + 1);
          }}
        />
      )}
    </div>
  );
};

export default UserCarsList;